USE [DBA_DB]
GO

/****** Object:  StoredProcedure [dbo].[usp_IndexMaintenance_v1]    Script Date: 04/12/2018 06:01:11 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





ALTER PROCEDURE [dbo].[usp_IndexMaintenance_v1] 
( @Databases nvarchar(max) , 
@runmode varchar(20) = 'collection' , 
@TimeLimit int = NULL 
) 
AS
BEGIN
	
	/****************************************************************************/
		-- Stored Procedure Name: usp_IndexMaintenance
		-- Purpose: User databases Index Maintenance
		-- Input Parameters: None
		-- Output: Table - IndexMaintenance
		-- Created By: Milind Gijavanekar
		-- Created Date: 08-Oct-2016
		-- Modified By: Saurabh Verma	
		-- Modified Date: 18/05/2017
		-- Modified to add index usage, fillfactor and consider only index with >= 5000 for maintenance
		-- Modified By: Saurabh Verma	
		-- Modified Date: 20/04/2018
		-- Input Parameters : @database and @runmode 
		-- @database nvarchar and used for used for database filtering possible values : SYSTEM_DATABASES, 	USER_DATABASES,	ALL_DATABASES,	AVAILABILITY_GROUP_DATABASES , 	Db1, 	Db1, Db2	USER_DATABASES, -Db1, 	%Db%	,%Db%, -Db1	ALL_DATABASES, -%Db%

		--@runmode controls the working of procedure , this will help us to collect the information around fragmentation and usage of indexes possible values collection  and execute

		-- Modified By: Saurabh Verma	
		-- Modified Date: 20/11/2018
		-- New parameter @TimeLimit accepts value in seconds , puts a limit on execution time of procedure 
		-- The indexes now  will be rebuilt or reorganized only if they have been used for seek, scan and lookups in last 3 days, this will filter most of the indexes to be executed in one run in index maintenance database  

  

	/****************************************************************************/
	SET NOCOUNT ON;

	DECLARE @LockFailedTables TABLE (DatabaseName VARCHAR(256), TableName VARCHAR(256), IndexName VARCHAR(256),			FragmentationPercent FLOAT, isPageLockEnabled BIT, HasBlob BIT, ReportDate SMALLDATETIME)
	DECLARE @iFailedCount INT
	DECLARE @DatabaseName VARCHAR(255)
	DECLARE @TableName VARCHAR(255)
	DECLARE @IndexName VARCHAR(255)
	DECLARE @FragmentationPercent FLOAT
	DECLARE @isPageLockEnabled BIT
	DECLARE @HasBlob BIT
	DECLARE @ReportDate SMALLDATETIME
	DECLARE @sql NVARCHAR(1000)
	DECLARE @SelectedDatabases TABLE (DatabaseName nvarchar(max),
                                    DatabaseType nvarchar(max),
                                    Selected bit)
	DECLARE @Error int = 0 
    DECLARE @ErrorMessage nvarchar(max) 
	DECLARE @tmpDatabases TABLE (ID int IDENTITY,
                               DatabaseName nvarchar(max),
                               DatabaseNameFS nvarchar(max),
                               DatabaseType nvarchar(max),
                               Selected bit,
                               Completed bit,
                               PRIMARY KEY(Selected, Completed, ID))
	DECLARE @sqlexec NVARCHAR(MAX) = N'';
	DECLARE @StartTime DATETIME  = GETDATE()
	IF NOT EXISTS (SELECT * FROM DBA_DB.sys.objects WHERE name = 'IndexMaintenance_v1')
	BEGIN
		
	CREATE TABLE [dbo].[IndexMaintenance_v1](
	[DatabaseName] [varchar](256) NULL,
	[TableName] [varchar](256) NULL,
	[IndexName] [varchar](256) NULL,
	[FragmentationPercent] [float] NULL,
	[isPageLockEnabled] [bit] NULL,
	[PageCount] [bigint] NULL,
	[FillFactor] [int] NULL,
	[HasBlob] [bit] NULL,
	[User_seeks] [int] NULL,
	[user_scans] [int] NULL,
	[user_lookups] [int] NULL,
	[user_updates] [int] NULL,
	[last_User_seeks] [datetime] NULL,
	[last_user_scans] [datetime] NULL,
	[last_user_lookups] [datetime] NULL,
	[last_user_updates] [datetime] NULL,
	[Command] [varchar](1000) NULL,
	[StartDateTime] [datetime] NULL,
	[EndDateTime] [datetime] NULL,
	[IsCompleted] [bit] NULL,
	[ReportDate] [smalldatetime] NULL
) ON [PRIMARY]


	END
	ELSE
	BEGIN
		-- Delete 2 months Old data
		DELETE FROM DBA_DB.dbo.IndexMaintenance_v1 WHERE ReportDate <= CONVERT(VARCHAR(10),DATEADD(month,-2,GETDATE()),110);
		-- If exists, delete today's data 
		DELETE FROM DBA_DB.dbo.IndexMaintenance_v1 WHERE ReportDate = CONVERT(VARCHAR(10),GETDATE(),110);
	END
				
	SET @Databases = REPLACE(@Databases, ', ', ',');

  WITH Databases1 (StartPosition, EndPosition, DatabaseItem) AS
  (
  SELECT 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, 1), 0), LEN(@Databases) + 1) - 1) AS DatabaseItem
  WHERE @Databases IS NOT NULL
  UNION ALL
  SELECT CAST(EndPosition AS int) + 1 AS StartPosition,
         ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) AS EndPosition,
         SUBSTRING(@Databases, EndPosition + 1, ISNULL(NULLIF(CHARINDEX(',', @Databases, EndPosition + 1), 0), LEN(@Databases) + 1) - EndPosition - 1) AS DatabaseItem
  FROM Databases1
  WHERE EndPosition < LEN(@Databases) + 1
  ),
  Databases2 (DatabaseItem, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem LIKE '-%' THEN RIGHT(DatabaseItem,LEN(DatabaseItem) - 1) ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem LIKE '-%' THEN 0 ELSE 1 END AS Selected
  FROM Databases1
  ),
  Databases3 (DatabaseItem, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN DatabaseItem IN('ALL_DATABASES','SYSTEM_DATABASES','USER_DATABASES') THEN '%' ELSE DatabaseItem END AS DatabaseItem,
         CASE WHEN DatabaseItem = 'SYSTEM_DATABASES' THEN 'S' WHEN DatabaseItem = 'USER_DATABASES' THEN 'U' ELSE NULL END AS DatabaseType,
         Selected
  FROM Databases2
  ),
  Databases4 (DatabaseName, DatabaseType, Selected) AS
  (
  SELECT CASE WHEN LEFT(DatabaseItem,1) = '[' AND RIGHT(DatabaseItem,1) = ']' THEN PARSENAME(DatabaseItem,1) ELSE DatabaseItem END AS DatabaseItem,
         DatabaseType,
         Selected
  FROM Databases3
  )
  INSERT INTO @SelectedDatabases (DatabaseName, DatabaseType, Selected)
  SELECT DatabaseName,
         DatabaseType,
         Selected
  FROM Databases4
  OPTION (MAXRECURSION 0)
  
  INSERT INTO @tmpDatabases (DatabaseName, DatabaseNameFS, DatabaseType, Selected, Completed)
  SELECT [name] AS DatabaseName,
         REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE([name],'\',''),'/',''),':',''),'*',''),'?',''),'"',''),'<',''),'>',''),'|',''),' ','') AS DatabaseNameFS,
         CASE WHEN name IN('master','msdb','model') THEN 'S' ELSE 'U' END AS DatabaseType,
         0 AS Selected,
         0 AS Completed
  FROM sys.databases
  WHERE [name] <> 'tempdb'
  AND source_database_id IS NULL
  ORDER BY [name] ASC

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 1

  UPDATE tmpDatabases
  SET tmpDatabases.Selected = SelectedDatabases.Selected
  FROM @tmpDatabases tmpDatabases
  INNER JOIN @SelectedDatabases SelectedDatabases
  ON tmpDatabases.DatabaseName LIKE REPLACE(SelectedDatabases.DatabaseName,'_','[_]')
  AND (tmpDatabases.DatabaseType = SelectedDatabases.DatabaseType OR SelectedDatabases.DatabaseType IS NULL)
  WHERE SelectedDatabases.Selected = 0

  IF @Databases IS NULL OR NOT EXISTS(SELECT * FROM @SelectedDatabases) OR EXISTS(SELECT * FROM @SelectedDatabases WHERE DatabaseName IS NULL OR DatabaseName = '')
  BEGIN
    SET @ErrorMessage = 'The value for the parameter @Databases is not supported.' + CHAR(13) + CHAR(10) + ' '
    RAISERROR(@ErrorMessage,16,1) WITH NOWAIT
    SET @Error = @@ERROR
  END
				
 SELECT @sqlexec += N'USE ' + QUOTENAME(DatabaseName) + ';
	INSERT INTO DBA_DB.dbo.IndexMaintenance_v1
					(
					 DatabaseName,
					 TableName,
					 IndexName,
					 FragmentationPercent,
					 isPageLockEnabled,
					 PageCount,
					 [FillFactor], 
					 HasBlob,
					 User_seeks,
					 user_scans	,
					 user_lookups,
					 user_updates,
					 last_User_seeks,
					 last_user_scans,
					 last_user_lookups,
					 last_user_updates,
					 Command,
					 StartDateTime,
					 EndDateTime,
					 IsCompleted,
					 ReportDate
					)
					Select 
				 DatabaseName, TableName,IndexName, avg_fragmentation_in_percent, allow_page_locks, page_count, fill_factor,
				    MAX(HasBlob),user_seeks,user_scans,user_lookups,user_updates, last_user_seek, last_user_scan,last_user_lookup, last_user_update,
					NULL,NULL,NULL,0, CONVERT(VARCHAR(10),GETDATE(),110)
				FROM
					(	
						SELECT DISTINCT 
						'''+ DatabaseName + ''' DatabaseName,
						''[''+OBJECT_SCHEMA_NAME(a.object_id)+''].[''+OBJECT_NAME(a.object_id)+'']'' TableName,
						b.name IndexName, 
						avg_fragmentation_in_percent, 
						allow_page_locks,
						page_count,
						b.fill_factor,
						(
                                                            select top 1
                                                                                  CASE WHEN 
                                                (
                                                       ((d.system_type_id IN (34,35,99,241)) -- image, text, ntext, xml
                                                       OR (d.system_type_id IN (167,231,165) -- varchar, nvarchar, varbinary
                                                              AND max_length = -1)
                                                       OR (d.user_type_id IN (129,130)))  -- geometry, geography 
                                                                                            
                                                ) THEN 1
                                         ELSE 0
                                         END HasBlob
                                                                       from sys.columns d where object_id=b.object_id 
                                                                       Order by 1 desc
                                                                       ) as HasBlob,
						 e.[user_seeks],    
                         e.[user_scans] ,   
                         e.[user_lookups],  
                         e.[user_updates] , 
                         e.[last_user_seek],
                         e.[last_user_scan],
                         e.[last_user_lookup], 
                         e.[last_user_update]
						FROM 
                                         sys.indexes AS b
                                         inner JOIN  sys.dm_db_index_usage_stats e  ON b.object_id = e.object_id AND b.index_id = e.index_id and b.name is not null and e.database_id=DB_ID()  --added the DATABASE ID condition here
                                         Inner JOIN sys.dm_db_index_physical_stats (DB_ID(), NULL , NULL, NULL, NULL) AS a
                                         ON e.object_id = a.object_id AND e.index_id = a.index_id and a.index_level=0
                                         INNER JOIN sys.tables AS c ON a.object_id = c.object_id -- Join this to get only tables(and thereby ignore VIEWS) 
                                         INNER JOIN sys.columns as d ON c.object_id = d.object_id
                                         WHERE  page_count > 5000 
                                         AND avg_fragmentation_in_percent >= 10
					) AS A 
					GROUP BY A.DatabaseName, A.TableName, A.IndexName, A.avg_fragmentation_in_percent, A.allow_page_locks, A.page_count , A.fill_factor,
					user_seeks,user_scans,user_lookups,user_updates, last_user_seek, last_user_scan,last_user_lookup, last_user_update
					ORDER BY A.avg_fragmentation_in_percent DESC,A.TableName ASC; 
			 '
			 FROM @tmpDatabases
			 where Selected = 1  ;
			EXEC sp_executesql @sqlexec;


if (@runmode = 'collection' ) 

BEGIN 

RETURN  0 ; 

END 

ELSE IF (@runmode = 'execute') 

BEGIN
	DECLARE @DATE_Q DATETIME = DATEADD(DD , -3 , GETDATE()); 	
	DECLARE TableCursor CURSOR FOR
		 

WITH CTE_Q (DatabaseName, TableName, IndexName, FragmentationPercent, isPageLockEnabled, HasBlob,LastUsedDate ,  ReportDate ) 

AS  ( SELECT DatabaseName, TableName, IndexName, FragmentationPercent, isPageLockEnabled, HasBlob,    (SELECT MAX(LastUsedDate)
      FROM (VALUES (last_user_lookups), (last_user_scans) , (last_User_seeks)) AS UsedDate(LastUsedDate))  
   AS LastUsedDate ,  ReportDate
		FROM DBA_DB.dbo.IndexMaintenance_v1
		WHERE ReportDate = CONVERT(VARCHAR(10),GETDATE(),110)
		) 
SELECT DatabaseName, TableName, IndexName, FragmentationPercent, isPageLockEnabled, HasBlob ,  ReportDate 
FROM CTE_Q 
WHERE LastUsedDate > @DATE_Q
ORDER BY DatabaseName ASC, FragmentationPercent DESC, TableName ASC 
		
		OPEN TableCursor
		FETCH NEXT FROM TableCursor INTO @DatabaseName, @TableName, @IndexName, @FragmentationPercent, @isPageLockEnabled, @HasBlob, @ReportDate
		SET LOCK_TIMEOUT 1000 -- 1 Second
			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @sql = 'USE [' + @DatabaseName + ']; '

				IF ((@FragmentationPercent <= 30.0) AND (@isPageLockEnabled = 1))
				BEGIN
					IF(@HasBlob = 0)
						SET @sql = @sql + N'ALTER INDEX ' +@IndexName + ' ON ' + @TableName + ' REORGANIZE;'
					
					--IF(@HasBlob = 1)
						--SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = OFF);';
				END
					
				IF ((@FragmentationPercent > 30.0) OR (@isPageLockEnabled = 0))
				BEGIN
					IF(@HasBlob = 0)
						SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = ON);';
					
					--IF(@HasBlob = 1)
						--SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = OFF);';
				END
					
				BEGIN TRY
					UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET Command = @sql, StartDateTime = GETDATE() WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
					EXEC (@sql)
					UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET EndDateTime = GETDATE(), IsCompleted = 1 WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
				END TRY
				BEGIN CATCH
					IF @@ERROR = 1222 -- Cannot lock table
					BEGIN
						INSERT INTO @LockFailedTables VALUES (@DatabaseName, @TableName, @IndexName, @FragmentationPercent, @isPageLockEnabled,@HasBlob,@ReportDate)
					
						UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET StartDateTime = NULL, EndDateTime = NULL, IsCompleted = 0 WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
					END
					ELSE
						PRINT 'Maintenance Failure (' +CAST(@@ERROR AS VARCHAR(256)) +'): ' +@sql
				END CATCH
				FETCH NEXT FROM TableCursor INTO @DatabaseName, @TableName, @IndexName, @FragmentationPercent, @isPageLockEnabled, @HasBlob, @ReportDate

IF (GETDATE() > DATEADD(ss,@TimeLimit,@StartTime))

BEGIN 


BREAK

END 
	


			END

		CLOSE TableCursor
		DEALLOCATE TableCursor

		-- Whatever tables couldn't be locked earlier, try now (multiple times) with increased timeout
		DECLARE FailedTableCursor CURSOR FOR SELECT DatabaseName, TableName, IndexName, FragmentationPercent, isPageLockEnabled, HasBlob, ReportDate FROM @LockFailedTables
		SET LOCK_TIMEOUT 5000 -- 5 Seconds
		DECLARE @retryCount INT
		SET @retryCount = 1
		WHILE (@retryCount <= 3)
		BEGIN
			SELECT @iFailedCount = COUNT(*) FROM @LockFailedTables
			IF @iFailedCount > 0
			BEGIN
				OPEN FailedTableCursor
				FETCH NEXT FROM FailedTableCursor INTO @DatabaseName, @TableName, @IndexName, @FragmentationPercent, @isPageLockEnabled, @HasBlob, @ReportDate
				WHILE @@FETCH_STATUS = 0
				BEGIN
				
					SET @sql = 'USE [' + @DatabaseName + ']; '

					IF ((@FragmentationPercent <= 30.0) AND (@isPageLockEnabled = 1))
					BEGIN
						IF(@HasBlob = 0)
						SET @sql = @sql + N'ALTER INDEX ' +@IndexName + ' ON ' + @TableName + ' REORGANIZE;'
					
						--IF(@HasBlob = 1)
						--SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = OFF);';
					END
					
					IF ((@FragmentationPercent > 30.0) OR (@isPageLockEnabled = 0))
					BEGIN
						IF(@HasBlob = 0)
						SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = ON);';
					
						--IF(@HasBlob = 1)
						--SET @sql = @sql + N'ALTER INDEX ' + @IndexName + ' ON ' + @TableName + ' REBUILD WITH (ONLINE = OFF);';
					END
				
					BEGIN TRY
						UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET Command = @sql, StartDateTime = GETDATE() WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
						EXEC (@sql)
						UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET EndDateTime = GETDATE(), IsCompleted = 1 WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
					
						DELETE FROM @LockFailedTables WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
					END TRY
					BEGIN CATCH
						UPDATE DBA_DB.dbo.IndexMaintenance_v1 SET EndDateTime = NULL, IsCompleted = 0 WHERE DatabaseName = @DatabaseName AND TableName = @TableName AND IndexName = @IndexName AND ReportDate = @ReportDate
					END CATCH
					FETCH NEXT FROM FailedTableCursor INTO @DatabaseName, @TableName, @IndexName, @FragmentationPercent, @isPageLockEnabled, @HasBlob, @ReportDate

					
IF (GETDATE() > DATEADD(ss,@TimeLimit,@StartTime))

BEGIN 

BREAK

END 
				END
				CLOSE FailedTableCursor
				WAITFOR DELAY '00:01:30'; -- 0 Hrs 1 minutes 30 seconds
			END
			SET @retryCount = @retryCount + 1
		END
	
		SET LOCK_TIMEOUT -1 -- Although it affects current connection only. Reset timeout
END


ELSE 
		PRINT 'WRONG RUN MODE ENTERED';	


END 




















GO


-------------------------------------------------------------------------------------------------------------------------------------------------

--Delta of wait stats 

CREATE TABLE #DeltaCal(
	[waittype] [nvarchar](120) NULL,
	[sumwaits_diff] [decimal](38, 2) NULL,
	[waitcount_diff] [bigint] NULL,
	[setorder] [bigint] NULL,
	[newdd] [int] NULL,
	[newhh] [int] NULL,
	[olddd] [int] NULL,
	[oldhh] [int] NULL
)
;
with CTE_Main
As
(
SELECT  [RowNum],
		datepart(hh,capturedate) as HH,
		datepart(dd,capturedate) as DD
      ,[CaptureDate],
	  RANK() OVER( ORDER BY  datepart(hh,capturedate),datepart(dd,capturedate)) as ddhh
      ,[WaitType]
      ,[Wait_S]
      ,[Resource_S]
      ,[Signal_S]
      ,[WaitCount]
      ,[Percentage]
      ,[AvgWait_S]
      ,[AvgRes_S]
      ,[AvgSig_S]
  FROM [DBA_DB].[dbo].[WaitStats]
  where CaptureDate between '2018-09-10 08:00:55.190' AND '2018-09-10 20:00:55.190' 
  ),
  Grouped as
  ( 
  select --ROW_NUMBER() OVER(partition by dd,hh ORDER BY dd,HH),--,datepart(hh,capturedate)),
  --RANK() OVER( ORDER BY  dd,hh) as rownum,
  [WaitType],datepart(hh,capturedate) hh,
		datepart(dd,capturedate) dd,count(*) as Cnt,sum(wait_s) sum_waits,sum(waitCount) sum_waitcount from cte_main
  group by [WaitType],datepart(hh,capturedate) ,
		datepart(dd,capturedate) 
  )
  select *,dense_RANK() OVER(ORDER BY dd ,hh) as setorder into #tmp from Grouped

  
DECLARE @Setorder INT =1
Declare @counter int =1
While @counter <= (select MAX(setorder) from #TMP)
BEGIN
	--select * from #tmp where setorder =@counter
	Insert into #DeltaCal
	select a.waittype,a.sum_waits-b.sum_waits as sumwaits_diff,a.sum_waitcount - b.sum_waitcount as waitcount_diff,a.setorder,a.dd as newdd,a.hh as newhh,b.dd as olddd,b.hh oldhh 
	from #TMP a inner join #tmp  b
	on a.setorder=b.setorder +1
	and a.waittype=b.waittype
	where a.setorder=@counter
Set @counter =@counter +1
ENd

select * from #DeltaCal
order by 4,3 desc

DROP TABLE #tmp
drop table #DeltaCal


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT  [collection_time] ,  [dd hh:mm:ss.mss]
      ,[session_id]  ,[blocking_session_id]
      ,[blocked_session_count]
      ,[sql_text]
      ,[login_name]
      ,[wait_info]
      ,[tran_log_writes]
      ,[CPU]
      ,[tempdb_allocations]
      ,[tempdb_current]
    
      ,[reads]
      ,[writes]
      ,[physical_reads]
      ,[query_plan]
      ,[used_memory]
      ,[status]
      ,[tran_start_time]
      ,[open_tran_count]
      ,[percent_complete]
      ,[host_name]
      ,[database_name]
      ,[program_name]
      --,[additional_info]
      ,[start_time]
      ,[login_time]
      ,[request_id]
     
  FROM [DBA_DB].[dbo].[WhowasActive]

  Where collection_time between '2018-10-25 08:00:55.190' AND '2018-10-25 20:00:55.190' 
  and (blocking_session_id is not null  OR blocked_session_count>0) 
  
----------------------
WITH CTE_MAIN
AS
(/****** Script for SelectTopNRows command from SSMS  ******/
SELECT  [collection_time] ,  [dd hh:mm:ss.mss]
      ,[session_id]  ,[blocking_session_id]
      ,[blocked_session_count]
      --,[sql_text]
      ,[login_name]
      ,[wait_info]
      ,[tran_log_writes]
      ,[CPU]
      ,[tempdb_allocations]
      ,[tempdb_current]
    
      ,[reads]
      ,[writes]
      ,[physical_reads]
      --,[query_plan]
      ,[used_memory]
      ,[status]
      ,[tran_start_time]
      ,[open_tran_count]
      ,[percent_complete]
      ,[host_name]
      ,[database_name]
      ,[program_name]
      --,[additional_info]
      ,[start_time]
      ,[login_time]
      ,[request_id]
     
  FROM [DBA_DB].[dbo].[WhowasActive]

  Where collection_time between '2018-09-10 08:00:55.190' AND '2018-09-10 20:00:55.190' 
  --and blocking_session_id is not null 
  )
  select * from CTE_MAIN where blocking_session_id is not null 
  UNION
  select * from CTE_MAIN where blocked_session_count>0-- session_id in (select blocking_session_id from CTE_MAIN where blocking_session_id is not null) 
  order by 1,4

--who was active 

---------
SELECT  [collection_time] ,  [dd hh:mm:ss.mss],
CAST(substring([wait_info],2,CHARINDEX('ms)',[wait_info])-2) as INT) as colext
      ,[session_id]  ,[blocking_session_id]
      ,[blocked_session_count]
      --,[sql_text]
      ,[login_name]
      ,[wait_info]
      ,[tran_log_writes]
      ,[CPU]
      ,[tempdb_allocations]
      ,[tempdb_current]
    
      ,[reads]
      ,[writes]
      ,[physical_reads]
      --,[query_plan]
      ,[used_memory]
      ,[status]
      ,[tran_start_time]
      ,[open_tran_count]
      ,[percent_complete]
      ,[host_name]
      ,[database_name]
      ,[program_name]
      --,[additional_info]
      ,[start_time]
      ,[login_time]
      ,[request_id]
     
  FROM [DBA_DB].[dbo].[WhowasActive]
    Where collection_time between '2018-09-10 08:00:55.190' AND '2018-09-10 20:00:55.190' 
	and wait_info like '%Page%'
	order by 3 desc
  
  ----------------------------------------------------------------------------------------------------------------------------------------
  --@show_own_spid -Retrieve data about the calling session
exec sp_whoisactive @show_own_spid = 1 

go 

--@show_system_spids -Retrieve data about system sessions

exec sp_whoisactive @show_system_spids = 1 

go 
--@show_sleeping_spids - Controls how sleeping SPIDs are handled, based on the idea of levels of interest -0 does not pull any sleeping SPIDs
---1 pulls only those sleeping SPIDs that also have an open transaction
---2 pulls all sleeping SPIDs
exec sp_whoisactive @show_sleeping_spids = 2 

go 

--@get_plans - Get associated query plans for running tasks, if available
exec sp_whoisactive @get_plans = 1

go 
 
--@get_task_info -Get information on active tasks, based on three interest levels
--   -Level 0 does not pull any task-related information
--   -Level 1 is a lightweight mode that pulls the top non-CXPACKET wait, giving preference to blockers
--   -Level 2 pulls all available task-based metrics, including: 
--  -number of active tasks, current wait stats, physical I/O, context switches, and blocker information
exec sp_whoisactive @get_task_info = 2

go 

--  @get_locks - Gets associated locks for each request, aggregated in an XML format

exec sp_whoisactive @get_locks = 1

go 
--@get_additional_info - Get additional non-performance-related information about the session or request
exec sp_whoisactive @get_additional_info = 1

go

--@find_block_leaders -Walk the blocking chain and count the number of total SPIDs blocked all the way down by a given session
exec sp_whoisactive @find_block_leaders = 1

go

-- @sort_order – sort the output 
exec sp_whoisactive @sort_order = 'reads'

go
------------------------------------------------------------------------------------------------------------------------------------------------

USE [DBA_DB]
GO

/****** Object:  StoredProcedure [dbo].[usp_Create_Database_Snapshot]    Script Date: 25/11/2017 07:08:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Saurabh Verma
-- Create date:  24/11/2017
-- Description:	Create databases snapshot for ADM 
-- =============================================

Create Procedure [dbo].[usp_Create_Database_Snapshot](
	@SourceDatabase sysname
)
as
--Exec Create_Database_Snapshot_for @SourceDatabase = 'XX_Aperio_Prod'

Declare @DatabaseSnapshot sysname

set @DatabaseSnapshot = @SourceDatabase + '_ForReBuild' ; 

begin
declare @sql nvarchar(max) = ''
IF EXISTS(select name from master.sys.databases WHERE name = @DatabaseSnapshot)
BEGIN
	
	set @sql = N'Drop DATABASE [' + @DatabaseSnapshot + ']'
	exec sp_executesql @sql
END
	

set @sql = ''
;with cte as (
	select 
		name, physical_name, ROW_NUMBER() over (order by create_lsn) rn
	from sys.master_files
	where database_id in (
		select database_id 
		from sys.databases 
		where name = @SourceDatabase
	)
	and type = 0 -- ROWS
)
select
	@sql = @sql + '(NAME = [' + name + '], FILENAME =''' + physical_name + '_SNP.ss''),'
from cte

set @sql = SUBSTRING(@sql,1,len(@sql)-1)

set @sql = N'
	CREATE DATABASE [' + @DatabaseSnapshot +'] ON
	' + @sql + '
	AS SNAPSHOT OF [' + @SourceDatabase + '];'

exec sp_executesql @sql

end


GO




  


